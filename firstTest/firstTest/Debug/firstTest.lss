
firstTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000be  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000145  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000d3  00000000  00000000  00000253  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000149  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000017f  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  00000613  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	1a c0       	rjmp	.+52     	; 0x66 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:

#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	DDRB = 0x03;
  34:	83 e0       	ldi	r24, 0x03	; 3
  36:	87 bb       	out	0x17, r24	; 23
	
    while(1)
    {
		PORTB = 0x01 << 1;
  38:	92 e0       	ldi	r25, 0x02	; 2
		_delay_ms(500);
		PORTB = 0x01;
  3a:	81 e0       	ldi	r24, 0x01	; 1
{
	DDRB = 0x03;
	
    while(1)
    {
		PORTB = 0x01 << 1;
  3c:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  3e:	2f ef       	ldi	r18, 0xFF	; 255
  40:	3f ed       	ldi	r19, 0xDF	; 223
  42:	40 e1       	ldi	r20, 0x10	; 16
  44:	21 50       	subi	r18, 0x01	; 1
  46:	30 40       	sbci	r19, 0x00	; 0
  48:	40 40       	sbci	r20, 0x00	; 0
  4a:	e1 f7       	brne	.-8      	; 0x44 <__SREG__+0x5>
  4c:	00 c0       	rjmp	.+0      	; 0x4e <__SREG__+0xf>
  4e:	00 00       	nop
		_delay_ms(500);
		PORTB = 0x01;
  50:	88 bb       	out	0x18, r24	; 24
  52:	2f ef       	ldi	r18, 0xFF	; 255
  54:	3f ed       	ldi	r19, 0xDF	; 223
  56:	40 e1       	ldi	r20, 0x10	; 16
  58:	21 50       	subi	r18, 0x01	; 1
  5a:	30 40       	sbci	r19, 0x00	; 0
  5c:	40 40       	sbci	r20, 0x00	; 0
  5e:	e1 f7       	brne	.-8      	; 0x58 <__SREG__+0x19>
  60:	00 c0       	rjmp	.+0      	; 0x62 <__SREG__+0x23>
  62:	00 00       	nop
  64:	eb cf       	rjmp	.-42     	; 0x3c <main+0x8>

00000066 <_exit>:
  66:	f8 94       	cli

00000068 <__stop_program>:
  68:	ff cf       	rjmp	.-2      	; 0x68 <__stop_program>
