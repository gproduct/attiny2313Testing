
firstTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000008c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000e0  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000174  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000106  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000154  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  00000508  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000018d  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000006b  00000000  00000000  000006c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	07 d0       	rcall	.+14     	; 0x3e <main>
  30:	2b c0       	rjmp	.+86     	; 0x88 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <setup>:
#include <util/delay.h>

void setup()
{
	
	DDRB = 0x04;
  34:	84 e0       	ldi	r24, 0x04	; 4
  36:	87 bb       	out	0x17, r24	; 23
	
	DDRD &= ~(1<<PD4); //Define input on PC3
  38:	8c 98       	cbi	0x11, 4	; 17
	PORTD |= (1<<PD4); // set pull up resistor
  3a:	94 9a       	sbi	0x12, 4	; 18
  3c:	08 95       	ret

0000003e <main>:
}
int main(void){
	setup();
  3e:	fa df       	rcall	.-12     	; 0x34 <setup>
		
	int counted = 0;
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
		}
		if(counted == 5){
			PORTB = 0x04;
		}
		else if(counted == 7){
			PORTB = 0x04;
  44:	24 e0       	ldi	r18, 0x04	; 4
	setup();
		
	int counted = 0;
	while(1)
	{
		if(PIND & (1<<PD4)) {
  46:	84 9b       	sbis	0x10, 4	; 16
  48:	0a c0       	rjmp	.+20     	; 0x5e <__SREG__+0x1f>
			counted++;
  4a:	01 96       	adiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  4c:	3f ef       	ldi	r19, 0xFF	; 255
  4e:	4f e7       	ldi	r20, 0x7F	; 127
  50:	5d e0       	ldi	r21, 0x0D	; 13
  52:	31 50       	subi	r19, 0x01	; 1
  54:	40 40       	sbci	r20, 0x00	; 0
  56:	50 40       	sbci	r21, 0x00	; 0
  58:	e1 f7       	brne	.-8      	; 0x52 <__SREG__+0x13>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <__SREG__+0x1d>
  5c:	00 00       	nop
			_delay_ms(400);
		}
		if(counted == 5){
  5e:	85 30       	cpi	r24, 0x05	; 5
  60:	91 05       	cpc	r25, r1
  62:	11 f4       	brne	.+4      	; 0x68 <__SREG__+0x29>
			PORTB = 0x04;
  64:	28 bb       	out	0x18, r18	; 24
  66:	06 c0       	rjmp	.+12     	; 0x74 <__SREG__+0x35>
		}
		else if(counted == 7){
  68:	87 30       	cpi	r24, 0x07	; 7
  6a:	91 05       	cpc	r25, r1
  6c:	11 f4       	brne	.+4      	; 0x72 <__SREG__+0x33>
			PORTB = 0x04;
  6e:	28 bb       	out	0x18, r18	; 24
  70:	01 c0       	rjmp	.+2      	; 0x74 <__SREG__+0x35>
		}
		else{
			PORTB = 0x00;
  72:	18 ba       	out	0x18, r1	; 24
  74:	3f ef       	ldi	r19, 0xFF	; 255
  76:	4f e5       	ldi	r20, 0x5F	; 95
  78:	53 e0       	ldi	r21, 0x03	; 3
  7a:	31 50       	subi	r19, 0x01	; 1
  7c:	40 40       	sbci	r20, 0x00	; 0
  7e:	50 40       	sbci	r21, 0x00	; 0
  80:	e1 f7       	brne	.-8      	; 0x7a <__SREG__+0x3b>
  82:	00 c0       	rjmp	.+0      	; 0x84 <__SREG__+0x45>
  84:	00 00       	nop
  86:	df cf       	rjmp	.-66     	; 0x46 <__SREG__+0x7>

00000088 <_exit>:
  88:	f8 94       	cli

0000008a <__stop_program>:
  8a:	ff cf       	rjmp	.-2      	; 0x8a <__stop_program>
