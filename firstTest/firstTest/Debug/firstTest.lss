
firstTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000086  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000da  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000024d  00000000  00000000  00000152  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000164  00000000  00000000  0000039f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a4  00000000  00000000  00000503  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000058  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000017c  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000026  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  000008a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a0 36       	cpi	r26, 0x60	; 96
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	02 d0       	rcall	.+4      	; 0x44 <main>
  40:	20 c0       	rjmp	.+64     	; 0x82 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <main>:
			OCR1A = speed;
		}	
		else if(direction == CCW)
		{
			OCR0A = speed;
			OCR1A = 0;
  44:	82 e3       	ldi	r24, 0x32	; 50
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	09 d0       	rcall	.+18     	; 0x5c <servo_init>
			OCR1B = 0;
			OCR0B = speed;
		}
		else if(direction == CCW)
		{
			OCR1B = speed;
  4a:	8f ef       	ldi	r24, 0xFF	; 255
  4c:	9f ef       	ldi	r25, 0xFF	; 255
  4e:	99 bd       	out	0x29, r25	; 41
  50:	88 bd       	out	0x28, r24	; 40
			OCR0B = 0;
  52:	1c be       	out	0x3c, r1	; 60
	}
	else if(side == RIGHT)
	{
		if(direction == CW)
		{
			OCR0A = 0;
  54:	16 be       	out	0x36, r1	; 54
			OCR1A = speed;
  56:	9b bd       	out	0x2b, r25	; 43
  58:	8a bd       	out	0x2a, r24	; 42
  5a:	f9 cf       	rjmp	.-14     	; 0x4e <main+0xa>

0000005c <servo_init>:
#include <avr/interrupt.h>
#include "pwm.h"

void servo_init(unsigned int f_pwm)
{
	DDRB |= (1 << PINB2) | (1 << PINB3) | (1 << PINB4);
  5c:	87 b3       	in	r24, 0x17	; 23
  5e:	8c 61       	ori	r24, 0x1C	; 28
  60:	87 bb       	out	0x17, r24	; 23
	DDRD |= (1 << PIND5);
  62:	8d 9a       	sbi	0x11, 5	; 17
	
	TCCR0A = (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
  64:	83 ea       	ldi	r24, 0xA3	; 163
  66:	80 bf       	out	0x30, r24	; 48
	TCCR0B = (1 << CS01) | (1 << CS00);
  68:	83 e0       	ldi	r24, 0x03	; 3
  6a:	83 bf       	out	0x33, r24	; 51
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM12) | (1 << WGM10);
  6c:	99 ea       	ldi	r25, 0xA9	; 169
  6e:	9f bd       	out	0x2f, r25	; 47
	TCCR1B = (1 << CS11) | (1 << CS10);
  70:	8e bd       	out	0x2e, r24	; 46
	TCNT0 = 0;
  72:	12 be       	out	0x32, r1	; 50
	OCR0A = 0;
  74:	16 be       	out	0x36, r1	; 54
	OCR0B = 0;
  76:	1c be       	out	0x3c, r1	; 60
	OCR1A = 0;
  78:	1b bc       	out	0x2b, r1	; 43
  7a:	1a bc       	out	0x2a, r1	; 42
	OCR1B = 0;
  7c:	19 bc       	out	0x29, r1	; 41
  7e:	18 bc       	out	0x28, r1	; 40
  80:	08 95       	ret

00000082 <_exit>:
  82:	f8 94       	cli

00000084 <__stop_program>:
  84:	ff cf       	rjmp	.-2      	; 0x84 <__stop_program>
