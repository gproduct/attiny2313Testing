
firstTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000086  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000da  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000050  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002b6  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001e3  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000220  00000000  00000000  000005f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000068  00000000  00000000  00000814  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001d4  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000008e  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000030  00000000  00000000  00000ade  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	0f d0       	rcall	.+30     	; 0x4e <main>
  30:	28 c0       	rjmp	.+80     	; 0x82 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <EEPROM_write>:
#include <avr/io.h>
#include <util/delay.h>

void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	while(EECR & ( 1 << EEPE));//waiting for the completion of the prevoious write
  34:	e1 99       	sbic	0x1c, 1	; 28
  36:	fe cf       	rjmp	.-4      	; 0x34 <EEPROM_write>
	
	//setting address and data
	EEAR = uiAddress;
  38:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
  3a:	6d bb       	out	0x1d, r22	; 29
	
	//writing logical one to EEMPE
	EECR |= (1<<EEMPE);
  3c:	e2 9a       	sbi	0x1c, 2	; 28
	
	//start eeprom write by setting eepe
	EECR |= (1<<EEPE);
  3e:	e1 9a       	sbi	0x1c, 1	; 28
  40:	08 95       	ret

00000042 <EEPROM_read>:
}
unsigned char EEPROM_read(unsigned int uiAddress)
{
	//waiting for the previous write
	while(EECR & (1 << EEPE));
  42:	e1 99       	sbic	0x1c, 1	; 28
  44:	fe cf       	rjmp	.-4      	; 0x42 <EEPROM_read>
	
	//setting up the address register
	EEAR = uiAddress;
  46:	8e bb       	out	0x1e, r24	; 30
	
	//start reading with EERE
	EECR |= (1 << EERE);
  48:	e0 9a       	sbi	0x1c, 0	; 28
	//return
	return EEDR;
  4a:	8d b3       	in	r24, 0x1d	; 29
}
  4c:	08 95       	ret

0000004e <main>:
#include <util/delay.h>
#include <avr/interrupt.h>

int main(void){
	unsigned char returned;
	PORTB = 0x01;
  4e:	81 e0       	ldi	r24, 0x01	; 1
  50:	88 bb       	out	0x18, r24	; 24
	EEPROM_write(EPReg, 0x01);
  52:	61 e0       	ldi	r22, 0x01	; 1
  54:	70 e0       	ldi	r23, 0x00	; 0
  56:	8c e0       	ldi	r24, 0x0C	; 12
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	ec df       	rcall	.-40     	; 0x34 <EEPROM_write>
	returned = EEPROM_read(EPReg);
  5c:	8c e0       	ldi	r24, 0x0C	; 12
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	f0 df       	rcall	.-32     	; 0x42 <EEPROM_read>
	if(returned == 0x01){
  62:	81 30       	cpi	r24, 0x01	; 1
  64:	11 f4       	brne	.+4      	; 0x6a <main+0x1c>
		PORTB = 0x01;
  66:	88 bb       	out	0x18, r24	; 24
  68:	02 c0       	rjmp	.+4      	; 0x6e <main+0x20>
	}
	else{
		PORTB = 0x01;
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6e:	2f ef       	ldi	r18, 0xFF	; 255
  70:	8f eb       	ldi	r24, 0xBF	; 191
  72:	91 e2       	ldi	r25, 0x21	; 33
  74:	21 50       	subi	r18, 0x01	; 1
  76:	80 40       	sbci	r24, 0x00	; 0
  78:	90 40       	sbci	r25, 0x00	; 0
  7a:	e1 f7       	brne	.-8      	; 0x74 <main+0x26>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <main+0x30>
  7e:	00 00       	nop
  80:	f6 cf       	rjmp	.-20     	; 0x6e <main+0x20>

00000082 <_exit>:
  82:	f8 94       	cli

00000084 <__stop_program>:
  84:	ff cf       	rjmp	.-2      	; 0x84 <__stop_program>
