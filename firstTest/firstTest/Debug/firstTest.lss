
firstTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001dd  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000f4  00000000  00000000  00000345  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000017e  00000000  00000000  00000439  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000188  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000009b  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000007ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>
  22:	07 c0       	rjmp	.+14     	; 0x32 <__bad_interrupt>
  24:	06 c0       	rjmp	.+12     	; 0x32 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	02 d0       	rcall	.+4      	; 0x34 <main>
  30:	47 c0       	rjmp	.+142    	; 0xc0 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <main>:

#include <avr/io.h>
#include <util/delay.h>
int main(void)
{
	DDRB  = 0x08;//make the pin as output
  34:	88 e0       	ldi	r24, 0x08	; 8
  36:	87 bb       	out	0x17, r24	; 23
	TCCR1A = (1 << COM1A1) | (1 << WGM00);//setup the pwm for that pin
  38:	81 e8       	ldi	r24, 0x81	; 129
  3a:	8f bd       	out	0x2f, r24	; 47
	OCR1A = 0x10;//put a value for it
  3c:	80 e1       	ldi	r24, 0x10	; 16
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	9b bd       	out	0x2b, r25	; 43
  42:	8a bd       	out	0x2a, r24	; 42
	TCCR1B = (1 << CS01);
  44:	82 e0       	ldi	r24, 0x02	; 2
  46:	8e bd       	out	0x2e, r24	; 46
	//in branch led we have some basic led code
    while(1)
    {
		uint8_t led;//because it mustn't go over 255
		for(led = 0;led<255;led++)
  48:	40 e0       	ldi	r20, 0x00	; 0
		{
			OCR1A = led;
			_delay_ms(50);	
		}
		_delay_ms(1000);
		OCR1A = 255;
  4a:	2f ef       	ldi	r18, 0xFF	; 255
  4c:	30 e0       	ldi	r19, 0x00	; 0
	TCCR1B = (1 << CS01);
	//in branch led we have some basic led code
    while(1)
    {
		uint8_t led;//because it mustn't go over 255
		for(led = 0;led<255;led++)
  4e:	50 e0       	ldi	r21, 0x00	; 0
  50:	0e c0       	rjmp	.+28     	; 0x6e <__SREG__+0x2f>
		{
			OCR1A = led;
  52:	84 2f       	mov	r24, r20
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	9b bd       	out	0x2b, r25	; 43
  58:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5a:	6f ef       	ldi	r22, 0xFF	; 255
  5c:	7f ea       	ldi	r23, 0xAF	; 175
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	61 50       	subi	r22, 0x01	; 1
  62:	70 40       	sbci	r23, 0x00	; 0
  64:	80 40       	sbci	r24, 0x00	; 0
  66:	e1 f7       	brne	.-8      	; 0x60 <__SREG__+0x21>
  68:	00 c0       	rjmp	.+0      	; 0x6a <__SREG__+0x2b>
  6a:	00 00       	nop
	TCCR1B = (1 << CS01);
	//in branch led we have some basic led code
    while(1)
    {
		uint8_t led;//because it mustn't go over 255
		for(led = 0;led<255;led++)
  6c:	4f 5f       	subi	r20, 0xFF	; 255
  6e:	4f 3f       	cpi	r20, 0xFF	; 255
  70:	81 f7       	brne	.-32     	; 0x52 <__SREG__+0x13>
  72:	9f ef       	ldi	r25, 0xFF	; 255
  74:	4f eb       	ldi	r20, 0xBF	; 191
  76:	61 e2       	ldi	r22, 0x21	; 33
  78:	91 50       	subi	r25, 0x01	; 1
  7a:	40 40       	sbci	r20, 0x00	; 0
  7c:	60 40       	sbci	r22, 0x00	; 0
  7e:	e1 f7       	brne	.-8      	; 0x78 <__SREG__+0x39>
  80:	00 c0       	rjmp	.+0      	; 0x82 <__SREG__+0x43>
  82:	00 00       	nop
		{
			OCR1A = led;
			_delay_ms(50);	
		}
		_delay_ms(1000);
		OCR1A = 255;
  84:	3b bd       	out	0x2b, r19	; 43
  86:	2a bd       	out	0x2a, r18	; 42
  88:	c9 01       	movw	r24, r18
		for(led = 255;led > 0;led--)
		{
			OCR1A = led;
  8a:	9b bd       	out	0x2b, r25	; 43
  8c:	8a bd       	out	0x2a, r24	; 42
  8e:	7f ef       	ldi	r23, 0xFF	; 255
  90:	4f ea       	ldi	r20, 0xAF	; 175
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	71 50       	subi	r23, 0x01	; 1
  96:	40 40       	sbci	r20, 0x00	; 0
  98:	60 40       	sbci	r22, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <__SREG__+0x55>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <__SREG__+0x5f>
  9e:	00 00       	nop
  a0:	01 97       	sbiw	r24, 0x01	; 1
			OCR1A = led;
			_delay_ms(50);	
		}
		_delay_ms(1000);
		OCR1A = 255;
		for(led = 255;led > 0;led--)
  a2:	00 97       	sbiw	r24, 0x00	; 0
  a4:	91 f7       	brne	.-28     	; 0x8a <__SREG__+0x4b>
		{
			OCR1A = led;
			_delay_ms(50);
		}
		OCR1A = 0x00;
  a6:	1b bc       	out	0x2b, r1	; 43
  a8:	1a bc       	out	0x2a, r1	; 42
  aa:	7f ef       	ldi	r23, 0xFF	; 255
  ac:	8f eb       	ldi	r24, 0xBF	; 191
  ae:	98 ea       	ldi	r25, 0xA8	; 168
  b0:	71 50       	subi	r23, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <__SREG__+0x71>
  b8:	00 c0       	rjmp	.+0      	; 0xba <__SREG__+0x7b>
  ba:	00 00       	nop
	TCCR1B = (1 << CS01);
	//in branch led we have some basic led code
    while(1)
    {
		uint8_t led;//because it mustn't go over 255
		for(led = 0;led<255;led++)
  bc:	45 2f       	mov	r20, r21
  be:	d7 cf       	rjmp	.-82     	; 0x6e <__SREG__+0x2f>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
